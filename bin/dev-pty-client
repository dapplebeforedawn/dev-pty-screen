#! /usr/bin/env ruby

require 'socket'
require 'io/console'

require_relative '../lib/client/app'

Thread.abort_on_exception = true

class DevPtyClient
  READSIZE = 4096
  CLEAR    = "\e[H\e[2J"
  SUSPEND  = ?\C-z

  def initialize
    startup_message

    @key_sock    = Socket.tcp(App.options.server_host,    App.options.key_port)
    @screen_sock = Socket.tcp(App.options.server_host, App.options.screen_port)

    Thread.new &screen_loop
    Thread.new &key_loop
  end

  def screen_loop
    -> do
      loop { STDOUT.write read_screen }
    end
  end
  private :screen_loop

  def read_screen
    return @screen_sock.readpartial( READSIZE )
    rescue EOFError; disconnected
  end
  private :read_screen

  def disconnected
    clear_screen
    abort("The dev-pty-server has closed the session.")
  end
  private :disconnected

  def key_loop
    -> do
      loop {
        key = STDIN.getch
        prompt_exit(key) or @key_sock.write(key)
      }
    end
  end
  private :key_loop

  def suspend?(key)
    key == SUSPEND
  end
  private :suspend?

  def prompt_exit(key)
    return false unless suspend?(key)
    clear_screen
    print "Disconnect from dev-pty-screen?(y/n): "
    will_exit if gets.match /y/i
    wont_exit
  end
  private :prompt_exit

  def will_exit
    exit
  end
  private :will_exit

  def wont_exit
    print "Run any vim command to re-draw the screen."
    return true
  end
  private :wont_exit

  def clear_screen
    puts CLEAR
  end
  private :clear_screen

  def startup_message
    clear_screen
    message_lines = File.readlines App.path.parent.join('doc', 'welcome.txt')
    longest_line  = message_lines.max_by(&:length).length
    screen_width  = STDOUT.winsize.last
    offset        = Array.new(screen_width/2 - longest_line/2, " ")
    message_lines.each do |line|
      print  offset * '' + line
    end
  end
  private :startup_message
end

DevPtyClient.new and sleep
